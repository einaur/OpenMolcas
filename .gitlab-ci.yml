image: molcas/build-doc

# Define templates for "sub-jobs"
# - install-key: install the SSH key to access private repositories
# - compile: compile Molcas with CMake
# - run-tests: run the verification suite

.template: &install-key
  before_script:
    # Install ssh-agent if not already installed
    - >
      which ssh-agent || ( apt-get update -y && apt-get install openssh-client -y )
    # Run ssh-agent (inside the build environment)
    - eval $(ssh-agent -s)
    # Add the SSH key stored in the ssh_key file (created by the runner)
    - ssh-add /ssh_key
    # Disable host key checking
    - mkdir -p ~/.ssh && chmod 700 ~/.ssh
    - >
      [[ -f /.dockerenv ]] && echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config && chmod 644 ~/.ssh/config

.template: &compile
  <<: *install-key
  script:
    - mkdir build
    - cd build
    - cp /license.dat .
    # save the CMake configuration from a variable
    - echo "$cache_file" > flags.cmake
    # clone molcas-extra and add the setting if specified
    # and copy molcas.driver so it is included in the artifacts
    - |
      if [ -n "$extra" ] ; then
        git clone --depth 10 git@git.teokem.lu.se:molcas-extra $extra
        echo 'set (EXTRA "$ENV{extra}" CACHE PATH "location of molcas-extra")' >> flags.cmake
        cp $extra/sbin/molcas.driver .
      fi
    - cmake -C flags.cmake ..
    - make #VERBOSE=1
    # some clean up to reduce artifact size
    - >
      shopt -s globstar ; rm -rf **/CMakeFiles
  artifacts:
    paths:
      - build/
    expire_in: 3 hours
  when: manual
  # allow failures so that the next stages are not blocked
  # (but test jobs that depend on this will fail later)
  allow_failure: true

.template: &run-tests
  script:
    - sbin/install_driver.sh build/molcas.driver
    - cd build
    # default if no tests specified is .all
    # run with "script" to force interactive terminal behaviour
    - |
      if [ -z "$tests" ] ; then export tests=".all" ; fi
      script -e -q -c "molcas verify $tests"
  after_script:
    - |
      cat build/test/result
      cp -L build/test/result result
      cp -Lr build/test/failed failed
  artifacts:
    paths:
      - result
      - failed/
    expire_in: 1 month
    when: always
  when: manual
  allow_failure: false

# Define some configuration groups (variables, tags, etc.) to be used in groups
# - plain: default configuration
# - pgi: use PGI compilers
# - nowarn: no warnings allowed

.template: &plain
  image: registry.gitlab.com/jellby/dockerfiles/gcc-5.4:latest
  variables: &plain_vars
    extra: /molcas-extra
    cache_file: ""
    CC: gcc
    CXX: g++
    FC: gfortran
  tags:
    - docker
    - extra

.template: &pgi
  image: registry.gitlab.com/jellby/dockerfiles/pgi:latest
  variables: &pgi_vars
    extra: /molcas-extra
    cache_file: |
    # Add -tp=x64 flag to make the result more portable
    CC: pgcc '-tp=x64'
    CXX: pgc++ '-tp=x64'
    FC: pgfortran '-tp=x64'
  tags: 
    - docker
    - extra

.template: &nowarn
  image: registry.gitlab.com/jellby/dockerfiles/gcc-5.4:latest
  variables: &nowarn_vars
    extra: /molcas-extra
    cache_file: |
      set (CMAKE_BUILD_TYPE "Debug" CACHE STRING "no opt, debug info")
      set (BUILD_SHARED_LIBS "OFF" CACHE STRING "do not use shared libmolcas")
      set (HDF5 "OFF" CACHE STRING "disable HDF5 support")
      set (BIGOT "ON" CACHE STRING "do not allow any warning")
    CC: gcc
    CXX: g++
    FC: gfortran
  tags:
    - docker
    - extra

# Define the actual jobs, each job has a "build" and a "test" stage,
# the latter depends on the former, variables can be overriden.

build:plain:
  stage: build
  <<: *plain
  <<: *compile
test:plain:
  stage: test
  dependencies:
    - build:plain
  <<: *plain
  <<: *run-tests

build:pgi:
  stage: build
  <<: *pgi
  <<: *compile
test:pgi:
  stage: test
  dependencies:
    - build:pgi
  <<: *pgi
  <<: *run-tests

build:nowarn:
  stage: build
  <<: *nowarn
  <<: *compile
test:nowarn:
  stage: test
  dependencies:
    - build:nowarn
  <<: *nowarn
  <<: *run-tests
  # only interested in compilation, so run no tests
  # (but the job will fail if the compilation didn't succeed
  variables:
    <<: *plain_vars
    tests: .none
